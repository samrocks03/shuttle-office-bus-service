c
n
c
user_params
c
l
exit
@user.save!
c
n
params
c
@user.password_digest
login_params[:password]
c
@user
c
n
login_params
@user
c
login_params
@user.authenticate(login_params[:password_digest])
c
@user.authenticate(login_params[:password_digest])
@user
c
@user.authenticate(login_params[:password_digest])c
@user
c
expect(JSON.parse(response.body)).to include('Company must exist')
 expect(JSON.parse(response.body)).to eq('Company must exist')
response.body
c
response.status
response.body
c
Bus.last.to_json
response.body
c
Bus.last
response.body
c
@bus
c
@bus
c
company
c
Company.find(50)
@bus
Company.pluck(:id)
c
n
company.id
c
@bus
@bus.save!
n
c
@bus.save!
n
c
user.admin?
c
nc
user
c
n
c
responsec
n
c
response.body
response
n
c
response.status
n
c
response.body
response
n
c
resonse
response.body
response
n
c
n
response.status
response.body
response
n
c
response.status
response.body
response
n
c
response.status
response
n
c
n
response
n
valid_attributes
company
params
c
next
params
c
@user.update!(user_params)
c
User.pluck(:email)c
@user.update!(user_params)
V
@user
c
@user.update!(user_params)
user_params
@user.update!(user_params)
c
response
c
User.last.role
 JWT.decode(token,  Rails.application.credentials[:secret_key_base])
n
request.headers['Authorization']
V
c
response
c
response.status
c
response.status
c
response
n
current_user
c
response
c
n
c
can [:update,:read ], User, id: user.id
n
c
n
@user.role_id
@user
c
expect(user).to be_able_to(:manage, :all)
expect(subject).to be_able_to(:manage, :all)
user
subject
c
user.save!
user
expect(subject).to be_able_to(:manage, :all)
subject
c
cc
c
n
c
Role.all
c
user.role
c
response.status
c
response.status
expect(response)
response
n
c
n
response
c
n
c
n
@token
@user.save
@user
q
n
c
Role.all
@user
c
Role.all
@user.save!
c
user_params
c
user_params
c
user_params
c
valid_attributes
user
c
user_params
c
user_params
c
user_params
c
@user
c
@user
n
c
user
c
user
company
c
@user
n
c
@user
n
c
@user
n
c
@user.save!
@token
n
c
@user
n
c
User.count
login_params[:email]
params
c
next
@schedule
next
@schedule
c
@schedule
next
c
next
@schedule
next
@schedule
next
@reservation.schedule

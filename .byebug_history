n
c
Role.all
c
user.role
c
response.status
c
response.status
expect(response)
response
n
c
n
response
c
n
c
n
@token
@user.save
@user
q
n
c
Role.all
@user
c
Role.all
@user.save!
c
user_params
c
user_params
c
user_params
c
valid_attributes
user
c
user_params
c
user_params
c
user_params
c
@user
c
@user
n
c
user
c
user
company
c
@user
n
c
@user
n
c
@user
n
c
@user.save!
@token
n
c
@user
n
c
User.count
login_params[:email]
params
c
next
@schedule
next
@schedule
c
@schedule
next
c
next
@schedule
next
@schedule
next
@reservation.schedule
@schedule
@reservation
reservation
c
@reservation.schedule.available_seats
@reservation.schedule
@reservation.schedule_id
@reservation.schedule
@schedule
if @reservation.save
@reservation
c
continue
c
continue
JWT.decode(token, '123')
eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2fQ.cLIgoVRCuciMiVVDphl0Y0yvSLTqxTTpGPEtLoW41mc
token
continue
eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2fQ.cLIgoVRCuciMiVVDphl0Y0yvSLTqxTTpGPEtLoW41mc
token
continue
d
token
continue
d
JWT.decode('eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2fQ._pALEZbUfNK-etNyeRlEgIIx2EOBnQ7RKXHABx6veyI', '123')
token
JWT.decode('eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2fQ._pALEZbUfNK-etNyeRlEgIIx2EOBnQ7RKXHABx6veyI', '123')
continue
JWT.decode(token, '123')
next
continue
JWT.decode(token, '123')
token
JWT.decode(token, '123')
next
continue
JWT.decode(token, '123')
next
c
JWT.decode(token,  Rails.application.credentials[:secret_key_base])
token
n
token
n
header
n
params
c
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1fQ.ih04Rll-C2BkXnk3xzJTyva0lWNaPTnTN2GGPIbMgCU",  Rails.application.credentials[:secret_key_base])
token
n
token
n
header
n
params
c
JWT.decode(token,  Rails.application.credentials[:secret_key_base])
token
begin
c
header
token
c
@token
token
JWT.decode(token,  Rails.application.credentials[:secret_key_base])
user_id
@user
user
c
token
c
token
header
headre
c
header
request.headers['Authorization']
request.headers
request
header
c
JWT
header
c
request.headers
request
header
c
decoded_token
c
exit
current_user
y_base])
user_id
@user
user
c
token
c
token
header
headre
c
header
request.headers['Authorization']
request.headers
request
header
c
JWT
header
c
request.headers
request
header
c
decoded_token
c
exit
current_user
_key_base])
token
n
token
n
header
n
params
c
JWT.decode(token,  Rails.application.credentials[:secret_key_base])
token
begin
c
header
token
c
@token
token
JWT.decode(token,  Rails.application.credentials[:secret_key_base])
user_id
@user
user
c
token
c
token
header
headre
c
header
request.headers['Authorization']
request.headers
request
header
c
JWT
header
c
request.headers
request
header
c
decoded_token
c
exit
current_user
